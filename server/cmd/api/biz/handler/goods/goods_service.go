// Code generated by hertz generator.

package goods

import (
	base "NihiStore/server/cmd/api/biz/model/base"
	hgoods "NihiStore/server/cmd/api/biz/model/goods"
	"NihiStore/server/cmd/api/config"
	"NihiStore/server/cmd/api/pkg"
	"NihiStore/server/shared/errx"
	kgoods "NihiStore/server/shared/kitex_gen/goods"
	"NihiStore/server/shared/tools"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"net/http"
)

// CreateGoods .
// @router /goods/creat [POST]
func CreateGoods(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hgoods.CreateGoodsReq
	resp := new(kgoods.CreateGoodsResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	auth, _ := c.Get("IsSeller")
	ID, _ := c.Get("ID")
	if auth.(bool) != true {
		resp.BaseResp = tools.BuildBaseResp(errx.AuthCreatGoodsFail, "Auth seller failed")
		c.JSON(200, resp)
		return
	}
	resp, err = config.GlobalGoodsClient.CreateGoods(ctx, &kgoods.CreateGoodsRequest{
		Id:               ID.(int64),
		GoodsInformation: pkg.ConvertGoodsInformation(req.GoodsInformation),
	})

	if err != nil {
		hlog.Error("rpc user service err!", err)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	c.JSON(200, resp)
	return
}

// DeleteGoods .
// @router /goods/delete [DELETE]
func DeleteGoods(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hgoods.DeleteGoodsReq
	resp := new(kgoods.DeleteGoodsResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	auth, _ := c.Get("IsSeller")
	ID, _ := c.Get("ID")
	if auth.(bool) != true {
		resp.BaseResp = tools.BuildBaseResp(errx.AuthCreatGoodsFail, "Auth seller failed")
		c.JSON(200, resp)
		return
	}
	resp, err = config.GlobalGoodsClient.DeleteGoods(ctx, &kgoods.DeleteGoodsRequest{
		GoodsId:  req.GoodsID,
		SellerId: ID.(int64),
	})

	if err != nil {
		hlog.Error("rpc user service err!", err)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	c.JSON(200, resp)
	return
}

// SearchGoodsInfo .
// @router /goods/searchgoodsinfo [GET]
func SearchGoodsInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hgoods.SearchGoodsInfoReq
	resp := new(kgoods.SearchGoodsInfoResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp, err = config.GlobalGoodsClient.SearchGoodsInfo(ctx, &kgoods.SearchGoodsInfoRequest{
		SearchMsg: req.SearchMsg,
	})

	if err != nil {
		hlog.Error("rpc user service err!", err)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	c.JSON(200, resp)
	return
}

// SearchGoods .
// @router /goods/searchgoods [GET]
func SearchGoods(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hgoods.SearchGoodsReq
	resp := new(kgoods.SearchGoodsResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp, err = config.GlobalGoodsClient.SearchGoods(ctx, &kgoods.SearchGoodsRequest{
		SearchMsg: req.SearchMsg,
	})

	if err != nil {
		hlog.Error("rpc user service err!", err)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	c.JSON(200, resp)
	return
}
