// Code generated by hertz generator.

package pay

import (
	hpay "NihiStore/server/cmd/api/biz/model/pay"
	"NihiStore/server/cmd/api/config"
	kpay "NihiStore/server/shared/kitex_gen/pay"
	"NihiStore/server/shared/model"
	"NihiStore/server/shared/mq"
	"NihiStore/server/shared/tools"
	"context"
	"encoding/json"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/adaptor"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"net/http"
)

// BuyGoods .
// @router /alipay/pay [GET]
func BuyGoods(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hpay.BuyGoodsReq
	resp := new(kpay.BuyGoodsResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	ID, _ := c.Get("ID")
	resp, err = config.GlobalPayClient.BuyGoods(ctx, &kpay.BuyGoodsRequest{
		Subject:     req.Subject,
		TotalAmount: req.TotalAmount,
		GoodsId:     req.GoodsId,
		UserId:      ID.(int64),
	})
	if err != nil {
		hlog.Error("rpc user service err!", err)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}
	fmt.Println(resp.URL)
	c.JSON(http.StatusOK, resp.BaseResp)
	c.Redirect(http.StatusTemporaryRedirect, []byte(resp.URL))
}

// CallBack .
// @router /alipay/callback [GET]
func CallBack(ctx context.Context, c *app.RequestContext) {

}

// Notify .
// @router /alipay/notify [POST]
func Notify(ctx context.Context, c *app.RequestContext) {
	req, err := adaptor.GetCompatRequest(&c.Request)
	if err != nil {
		hlog.Error("Get req fail")
		c.JSON(http.StatusInternalServerError, utils.H{
			"msg": err.Error(),
		})
		return
	}
	noti, err := config.AliClient.GetTradeNotification(req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, utils.H{})
		return
	}
	buyerId, goodsId := tools.ParseOutTradeNo(noti.OutTradeNo)
	data, err := json.Marshal(&model.Order{
		GoodsId:     goodsId,
		OutTradeNo:  noti.OutTradeNo,
		BuyerId:     buyerId,
		BuyerAliId:  noti.BuyerId,
		SellerAliId: noti.SellerId,
		TradeNo:     noti.TradeNo,
		TradeStatus: string(noti.TradeStatus),
		Subject:     noti.Subject,
		GmtCreate:   noti.GmtCreate,
		GmtPayment:  noti.GmtPayment,
	})
	if err != nil {
		hlog.Error("marshal noti err!")
		return
	}
	mq.Producer("Pay", string(data), config.GlobalServerConfig.MqInfo.Address)
	c.String(http.StatusOK, "success")
}
