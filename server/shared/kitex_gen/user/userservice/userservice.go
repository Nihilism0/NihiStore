// Code generated by Kitex v0.5.1. DO NOT EDIT.

package userservice

import (
	user "NihiStore/server/shared/kitex_gen/user"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Login":                 kitex.NewMethodInfo(loginHandler, newUserServiceLoginArgs, newUserServiceLoginResult, false),
		"Register":              kitex.NewMethodInfo(registerHandler, newUserServiceRegisterArgs, newUserServiceRegisterResult, false),
		"CreateFavorites":       kitex.NewMethodInfo(createFavoritesHandler, newUserServiceCreateFavoritesArgs, newUserServiceCreateFavoritesResult, false),
		"WatchFavorites":        kitex.NewMethodInfo(watchFavoritesHandler, newUserServiceWatchFavoritesArgs, newUserServiceWatchFavoritesResult, false),
		"WatchGoodsInFavorites": kitex.NewMethodInfo(watchGoodsInFavoritesHandler, newUserServiceWatchGoodsInFavoritesArgs, newUserServiceWatchGoodsInFavoritesResult, false),
		"DeleteFavorites":       kitex.NewMethodInfo(deleteFavoritesHandler, newUserServiceDeleteFavoritesArgs, newUserServiceDeleteFavoritesResult, false),
		"CollectGoods":          kitex.NewMethodInfo(collectGoodsHandler, newUserServiceCollectGoodsArgs, newUserServiceCollectGoodsResult, false),
		"AddToCart":             kitex.NewMethodInfo(addToCartHandler, newUserServiceAddToCartArgs, newUserServiceAddToCartResult, false),
		"AddAmountCart":         kitex.NewMethodInfo(addAmountCartHandler, newUserServiceAddAmountCartArgs, newUserServiceAddAmountCartResult, false),
		"DeleteAmountCart":      kitex.NewMethodInfo(deleteAmountCartHandler, newUserServiceDeleteAmountCartArgs, newUserServiceDeleteAmountCartResult, false),
		"RemoveOutCart":         kitex.NewMethodInfo(removeOutCartHandler, newUserServiceRemoveOutCartArgs, newUserServiceRemoveOutCartResult, false),
		"WatchCart":             kitex.NewMethodInfo(watchCartHandler, newUserServiceWatchCartArgs, newUserServiceWatchCartResult, false),
		"CleanCart":             kitex.NewMethodInfo(cleanCartHandler, newUserServiceCleanCartArgs, newUserServiceCleanCartResult, false),
		"BeSeller":              kitex.NewMethodInfo(beSellerHandler, newUserServiceBeSellerArgs, newUserServiceBeSellerResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginArgs)
	realResult := result.(*user.UserServiceLoginResult)
	success, err := handler.(user.UserService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return user.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return user.NewUserServiceLoginResult()
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegisterArgs)
	realResult := result.(*user.UserServiceRegisterResult)
	success, err := handler.(user.UserService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterArgs() interface{} {
	return user.NewUserServiceRegisterArgs()
}

func newUserServiceRegisterResult() interface{} {
	return user.NewUserServiceRegisterResult()
}

func createFavoritesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceCreateFavoritesArgs)
	realResult := result.(*user.UserServiceCreateFavoritesResult)
	success, err := handler.(user.UserService).CreateFavorites(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCreateFavoritesArgs() interface{} {
	return user.NewUserServiceCreateFavoritesArgs()
}

func newUserServiceCreateFavoritesResult() interface{} {
	return user.NewUserServiceCreateFavoritesResult()
}

func watchFavoritesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceWatchFavoritesArgs)
	realResult := result.(*user.UserServiceWatchFavoritesResult)
	success, err := handler.(user.UserService).WatchFavorites(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceWatchFavoritesArgs() interface{} {
	return user.NewUserServiceWatchFavoritesArgs()
}

func newUserServiceWatchFavoritesResult() interface{} {
	return user.NewUserServiceWatchFavoritesResult()
}

func watchGoodsInFavoritesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceWatchGoodsInFavoritesArgs)
	realResult := result.(*user.UserServiceWatchGoodsInFavoritesResult)
	success, err := handler.(user.UserService).WatchGoodsInFavorites(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceWatchGoodsInFavoritesArgs() interface{} {
	return user.NewUserServiceWatchGoodsInFavoritesArgs()
}

func newUserServiceWatchGoodsInFavoritesResult() interface{} {
	return user.NewUserServiceWatchGoodsInFavoritesResult()
}

func deleteFavoritesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceDeleteFavoritesArgs)
	realResult := result.(*user.UserServiceDeleteFavoritesResult)
	success, err := handler.(user.UserService).DeleteFavorites(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceDeleteFavoritesArgs() interface{} {
	return user.NewUserServiceDeleteFavoritesArgs()
}

func newUserServiceDeleteFavoritesResult() interface{} {
	return user.NewUserServiceDeleteFavoritesResult()
}

func collectGoodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceCollectGoodsArgs)
	realResult := result.(*user.UserServiceCollectGoodsResult)
	success, err := handler.(user.UserService).CollectGoods(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCollectGoodsArgs() interface{} {
	return user.NewUserServiceCollectGoodsArgs()
}

func newUserServiceCollectGoodsResult() interface{} {
	return user.NewUserServiceCollectGoodsResult()
}

func addToCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceAddToCartArgs)
	realResult := result.(*user.UserServiceAddToCartResult)
	success, err := handler.(user.UserService).AddToCart(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceAddToCartArgs() interface{} {
	return user.NewUserServiceAddToCartArgs()
}

func newUserServiceAddToCartResult() interface{} {
	return user.NewUserServiceAddToCartResult()
}

func addAmountCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceAddAmountCartArgs)
	realResult := result.(*user.UserServiceAddAmountCartResult)
	success, err := handler.(user.UserService).AddAmountCart(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceAddAmountCartArgs() interface{} {
	return user.NewUserServiceAddAmountCartArgs()
}

func newUserServiceAddAmountCartResult() interface{} {
	return user.NewUserServiceAddAmountCartResult()
}

func deleteAmountCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceDeleteAmountCartArgs)
	realResult := result.(*user.UserServiceDeleteAmountCartResult)
	success, err := handler.(user.UserService).DeleteAmountCart(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceDeleteAmountCartArgs() interface{} {
	return user.NewUserServiceDeleteAmountCartArgs()
}

func newUserServiceDeleteAmountCartResult() interface{} {
	return user.NewUserServiceDeleteAmountCartResult()
}

func removeOutCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRemoveOutCartArgs)
	realResult := result.(*user.UserServiceRemoveOutCartResult)
	success, err := handler.(user.UserService).RemoveOutCart(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRemoveOutCartArgs() interface{} {
	return user.NewUserServiceRemoveOutCartArgs()
}

func newUserServiceRemoveOutCartResult() interface{} {
	return user.NewUserServiceRemoveOutCartResult()
}

func watchCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceWatchCartArgs)
	realResult := result.(*user.UserServiceWatchCartResult)
	success, err := handler.(user.UserService).WatchCart(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceWatchCartArgs() interface{} {
	return user.NewUserServiceWatchCartArgs()
}

func newUserServiceWatchCartResult() interface{} {
	return user.NewUserServiceWatchCartResult()
}

func cleanCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceCleanCartArgs)
	realResult := result.(*user.UserServiceCleanCartResult)
	success, err := handler.(user.UserService).CleanCart(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCleanCartArgs() interface{} {
	return user.NewUserServiceCleanCartArgs()
}

func newUserServiceCleanCartResult() interface{} {
	return user.NewUserServiceCleanCartResult()
}

func beSellerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceBeSellerArgs)
	realResult := result.(*user.UserServiceBeSellerResult)
	success, err := handler.(user.UserService).BeSeller(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceBeSellerArgs() interface{} {
	return user.NewUserServiceBeSellerArgs()
}

func newUserServiceBeSellerResult() interface{} {
	return user.NewUserServiceBeSellerResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.UserServiceLoginArgs
	_args.Req = req
	var _result user.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Register(ctx context.Context, req *user.RegisterRequest) (r *user.RegisterResponse, err error) {
	var _args user.UserServiceRegisterArgs
	_args.Req = req
	var _result user.UserServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFavorites(ctx context.Context, req *user.CreateFavoritesRequest) (r *user.CreateFavoritesResponse, err error) {
	var _args user.UserServiceCreateFavoritesArgs
	_args.Req = req
	var _result user.UserServiceCreateFavoritesResult
	if err = p.c.Call(ctx, "CreateFavorites", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) WatchFavorites(ctx context.Context, req *user.WatchFavoritesRequset) (r *user.WatchFavoritesResponse, err error) {
	var _args user.UserServiceWatchFavoritesArgs
	_args.Req = req
	var _result user.UserServiceWatchFavoritesResult
	if err = p.c.Call(ctx, "WatchFavorites", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) WatchGoodsInFavorites(ctx context.Context, req *user.WatchGoodsInFavoritesRequest) (r *user.WatchGoodsInFavoritesResponse, err error) {
	var _args user.UserServiceWatchGoodsInFavoritesArgs
	_args.Req = req
	var _result user.UserServiceWatchGoodsInFavoritesResult
	if err = p.c.Call(ctx, "WatchGoodsInFavorites", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFavorites(ctx context.Context, req *user.DeleteFavoritesRequest) (r *user.DeleteFavoritesResponse, err error) {
	var _args user.UserServiceDeleteFavoritesArgs
	_args.Req = req
	var _result user.UserServiceDeleteFavoritesResult
	if err = p.c.Call(ctx, "DeleteFavorites", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CollectGoods(ctx context.Context, req *user.CollectGoodsRequest) (r *user.CollectGoodsResponse, err error) {
	var _args user.UserServiceCollectGoodsArgs
	_args.Req = req
	var _result user.UserServiceCollectGoodsResult
	if err = p.c.Call(ctx, "CollectGoods", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddToCart(ctx context.Context, req *user.AddToCartRequest) (r *user.AddToCartResponse, err error) {
	var _args user.UserServiceAddToCartArgs
	_args.Req = req
	var _result user.UserServiceAddToCartResult
	if err = p.c.Call(ctx, "AddToCart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddAmountCart(ctx context.Context, req *user.AddAmountCartRequest) (r *user.AddAmountCartResponse, err error) {
	var _args user.UserServiceAddAmountCartArgs
	_args.Req = req
	var _result user.UserServiceAddAmountCartResult
	if err = p.c.Call(ctx, "AddAmountCart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAmountCart(ctx context.Context, req *user.DeleteAmountCartRequest) (r *user.DeleteAmountCartResponse, err error) {
	var _args user.UserServiceDeleteAmountCartArgs
	_args.Req = req
	var _result user.UserServiceDeleteAmountCartResult
	if err = p.c.Call(ctx, "DeleteAmountCart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RemoveOutCart(ctx context.Context, req *user.RemoveOutCartRequest) (r *user.RemoveOutCartResponse, err error) {
	var _args user.UserServiceRemoveOutCartArgs
	_args.Req = req
	var _result user.UserServiceRemoveOutCartResult
	if err = p.c.Call(ctx, "RemoveOutCart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) WatchCart(ctx context.Context, req *user.WatchCartRequest) (r *user.WatchCartResponse, err error) {
	var _args user.UserServiceWatchCartArgs
	_args.Req = req
	var _result user.UserServiceWatchCartResult
	if err = p.c.Call(ctx, "WatchCart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CleanCart(ctx context.Context, req *user.CleanCartRequest) (r *user.CleanCartResponse, err error) {
	var _args user.UserServiceCleanCartArgs
	_args.Req = req
	var _result user.UserServiceCleanCartResult
	if err = p.c.Call(ctx, "CleanCart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BeSeller(ctx context.Context, req *user.BeSellerRequest) (r *user.BeSellerResponse, err error) {
	var _args user.UserServiceBeSellerArgs
	_args.Req = req
	var _result user.UserServiceBeSellerResult
	if err = p.c.Call(ctx, "BeSeller", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
