// Code generated by Kitex v0.5.1. DO NOT EDIT.

package ossservice

import (
	oss "NihiStore/server/shared/kitex_gen/oss"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return oSSServiceServiceInfo
}

var oSSServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "OSSService"
	handlerType := (*oss.OSSService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateOSS": kitex.NewMethodInfo(createOSSHandler, newOSSServiceCreateOSSArgs, newOSSServiceCreateOSSResult, false),
		"GetOSS":    kitex.NewMethodInfo(getOSSHandler, newOSSServiceGetOSSArgs, newOSSServiceGetOSSResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "oss",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func createOSSHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*oss.OSSServiceCreateOSSArgs)
	realResult := result.(*oss.OSSServiceCreateOSSResult)
	success, err := handler.(oss.OSSService).CreateOSS(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOSSServiceCreateOSSArgs() interface{} {
	return oss.NewOSSServiceCreateOSSArgs()
}

func newOSSServiceCreateOSSResult() interface{} {
	return oss.NewOSSServiceCreateOSSResult()
}

func getOSSHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*oss.OSSServiceGetOSSArgs)
	realResult := result.(*oss.OSSServiceGetOSSResult)
	success, err := handler.(oss.OSSService).GetOSS(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOSSServiceGetOSSArgs() interface{} {
	return oss.NewOSSServiceGetOSSArgs()
}

func newOSSServiceGetOSSResult() interface{} {
	return oss.NewOSSServiceGetOSSResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateOSS(ctx context.Context, req *oss.CreateOSSRequest) (r *oss.CreateOSSResponse, err error) {
	var _args oss.OSSServiceCreateOSSArgs
	_args.Req = req
	var _result oss.OSSServiceCreateOSSResult
	if err = p.c.Call(ctx, "CreateOSS", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOSS(ctx context.Context, req *oss.GetOSSRequest) (r *oss.GetOSSResponse, err error) {
	var _args oss.OSSServiceGetOSSArgs
	_args.Req = req
	var _result oss.OSSServiceGetOSSResult
	if err = p.c.Call(ctx, "GetOSS", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
