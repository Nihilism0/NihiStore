// Code generated by Kitex v0.5.1. DO NOT EDIT.

package goodsservice

import (
	goods "NihiStore/server/shared/kitex_gen/goods"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateGoods(ctx context.Context, req *goods.CreateGoodsRequest, callOptions ...callopt.Option) (r *goods.CreateGoodsResponse, err error)
	DeleteGoods(ctx context.Context, req *goods.DeleteGoodsRequest, callOptions ...callopt.Option) (r *goods.DeleteGoodsResponse, err error)
	UpdateGoods(ctx context.Context, req *goods.UpdateGoodsRequest, callOptions ...callopt.Option) (r *goods.UpdateGoodsResponse, err error)
	SearchGoodsInfo(ctx context.Context, req *goods.SearchGoodsInfoRequest, callOptions ...callopt.Option) (r *goods.SearchGoodsInfoResponse, err error)
	SearchGoods(ctx context.Context, req *goods.SearchGoodsRequest, callOptions ...callopt.Option) (r *goods.SearchGoodsResponse, err error)
	UploadGoodsPhoto(ctx context.Context, req *goods.UploadGoodsPhotoRequest, callOptions ...callopt.Option) (r *goods.UploadGoodsPhotoResponse, err error)
	GetGoodsPhoto(ctx context.Context, req *goods.GetGoodsPhotoRequest, callOptions ...callopt.Option) (r *goods.GetGoodsPhotoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kGoodsServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kGoodsServiceClient struct {
	*kClient
}

func (p *kGoodsServiceClient) CreateGoods(ctx context.Context, req *goods.CreateGoodsRequest, callOptions ...callopt.Option) (r *goods.CreateGoodsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateGoods(ctx, req)
}

func (p *kGoodsServiceClient) DeleteGoods(ctx context.Context, req *goods.DeleteGoodsRequest, callOptions ...callopt.Option) (r *goods.DeleteGoodsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteGoods(ctx, req)
}

func (p *kGoodsServiceClient) UpdateGoods(ctx context.Context, req *goods.UpdateGoodsRequest, callOptions ...callopt.Option) (r *goods.UpdateGoodsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateGoods(ctx, req)
}

func (p *kGoodsServiceClient) SearchGoodsInfo(ctx context.Context, req *goods.SearchGoodsInfoRequest, callOptions ...callopt.Option) (r *goods.SearchGoodsInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchGoodsInfo(ctx, req)
}

func (p *kGoodsServiceClient) SearchGoods(ctx context.Context, req *goods.SearchGoodsRequest, callOptions ...callopt.Option) (r *goods.SearchGoodsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchGoods(ctx, req)
}

func (p *kGoodsServiceClient) UploadGoodsPhoto(ctx context.Context, req *goods.UploadGoodsPhotoRequest, callOptions ...callopt.Option) (r *goods.UploadGoodsPhotoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadGoodsPhoto(ctx, req)
}

func (p *kGoodsServiceClient) GetGoodsPhoto(ctx context.Context, req *goods.GetGoodsPhotoRequest, callOptions ...callopt.Option) (r *goods.GetGoodsPhotoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetGoodsPhoto(ctx, req)
}
