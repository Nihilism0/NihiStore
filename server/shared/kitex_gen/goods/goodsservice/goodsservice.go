// Code generated by Kitex v0.5.1. DO NOT EDIT.

package goodsservice

import (
	goods "NihiStore/server/shared/kitex_gen/goods"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return goodsServiceServiceInfo
}

var goodsServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "GoodsService"
	handlerType := (*goods.GoodsService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateGoods":      kitex.NewMethodInfo(createGoodsHandler, newGoodsServiceCreateGoodsArgs, newGoodsServiceCreateGoodsResult, false),
		"DeleteGoods":      kitex.NewMethodInfo(deleteGoodsHandler, newGoodsServiceDeleteGoodsArgs, newGoodsServiceDeleteGoodsResult, false),
		"UpdateGoods":      kitex.NewMethodInfo(updateGoodsHandler, newGoodsServiceUpdateGoodsArgs, newGoodsServiceUpdateGoodsResult, false),
		"SearchGoodsInfo":  kitex.NewMethodInfo(searchGoodsInfoHandler, newGoodsServiceSearchGoodsInfoArgs, newGoodsServiceSearchGoodsInfoResult, false),
		"SearchGoods":      kitex.NewMethodInfo(searchGoodsHandler, newGoodsServiceSearchGoodsArgs, newGoodsServiceSearchGoodsResult, false),
		"UploadGoodsPhoto": kitex.NewMethodInfo(uploadGoodsPhotoHandler, newGoodsServiceUploadGoodsPhotoArgs, newGoodsServiceUploadGoodsPhotoResult, false),
		"GetGoodsPhoto":    kitex.NewMethodInfo(getGoodsPhotoHandler, newGoodsServiceGetGoodsPhotoArgs, newGoodsServiceGetGoodsPhotoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "goods",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func createGoodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*goods.GoodsServiceCreateGoodsArgs)
	realResult := result.(*goods.GoodsServiceCreateGoodsResult)
	success, err := handler.(goods.GoodsService).CreateGoods(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGoodsServiceCreateGoodsArgs() interface{} {
	return goods.NewGoodsServiceCreateGoodsArgs()
}

func newGoodsServiceCreateGoodsResult() interface{} {
	return goods.NewGoodsServiceCreateGoodsResult()
}

func deleteGoodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*goods.GoodsServiceDeleteGoodsArgs)
	realResult := result.(*goods.GoodsServiceDeleteGoodsResult)
	success, err := handler.(goods.GoodsService).DeleteGoods(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGoodsServiceDeleteGoodsArgs() interface{} {
	return goods.NewGoodsServiceDeleteGoodsArgs()
}

func newGoodsServiceDeleteGoodsResult() interface{} {
	return goods.NewGoodsServiceDeleteGoodsResult()
}

func updateGoodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*goods.GoodsServiceUpdateGoodsArgs)
	realResult := result.(*goods.GoodsServiceUpdateGoodsResult)
	success, err := handler.(goods.GoodsService).UpdateGoods(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGoodsServiceUpdateGoodsArgs() interface{} {
	return goods.NewGoodsServiceUpdateGoodsArgs()
}

func newGoodsServiceUpdateGoodsResult() interface{} {
	return goods.NewGoodsServiceUpdateGoodsResult()
}

func searchGoodsInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*goods.GoodsServiceSearchGoodsInfoArgs)
	realResult := result.(*goods.GoodsServiceSearchGoodsInfoResult)
	success, err := handler.(goods.GoodsService).SearchGoodsInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGoodsServiceSearchGoodsInfoArgs() interface{} {
	return goods.NewGoodsServiceSearchGoodsInfoArgs()
}

func newGoodsServiceSearchGoodsInfoResult() interface{} {
	return goods.NewGoodsServiceSearchGoodsInfoResult()
}

func searchGoodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*goods.GoodsServiceSearchGoodsArgs)
	realResult := result.(*goods.GoodsServiceSearchGoodsResult)
	success, err := handler.(goods.GoodsService).SearchGoods(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGoodsServiceSearchGoodsArgs() interface{} {
	return goods.NewGoodsServiceSearchGoodsArgs()
}

func newGoodsServiceSearchGoodsResult() interface{} {
	return goods.NewGoodsServiceSearchGoodsResult()
}

func uploadGoodsPhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*goods.GoodsServiceUploadGoodsPhotoArgs)
	realResult := result.(*goods.GoodsServiceUploadGoodsPhotoResult)
	success, err := handler.(goods.GoodsService).UploadGoodsPhoto(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGoodsServiceUploadGoodsPhotoArgs() interface{} {
	return goods.NewGoodsServiceUploadGoodsPhotoArgs()
}

func newGoodsServiceUploadGoodsPhotoResult() interface{} {
	return goods.NewGoodsServiceUploadGoodsPhotoResult()
}

func getGoodsPhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*goods.GoodsServiceGetGoodsPhotoArgs)
	realResult := result.(*goods.GoodsServiceGetGoodsPhotoResult)
	success, err := handler.(goods.GoodsService).GetGoodsPhoto(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGoodsServiceGetGoodsPhotoArgs() interface{} {
	return goods.NewGoodsServiceGetGoodsPhotoArgs()
}

func newGoodsServiceGetGoodsPhotoResult() interface{} {
	return goods.NewGoodsServiceGetGoodsPhotoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateGoods(ctx context.Context, req *goods.CreateGoodsRequest) (r *goods.CreateGoodsResponse, err error) {
	var _args goods.GoodsServiceCreateGoodsArgs
	_args.Req = req
	var _result goods.GoodsServiceCreateGoodsResult
	if err = p.c.Call(ctx, "CreateGoods", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteGoods(ctx context.Context, req *goods.DeleteGoodsRequest) (r *goods.DeleteGoodsResponse, err error) {
	var _args goods.GoodsServiceDeleteGoodsArgs
	_args.Req = req
	var _result goods.GoodsServiceDeleteGoodsResult
	if err = p.c.Call(ctx, "DeleteGoods", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateGoods(ctx context.Context, req *goods.UpdateGoodsRequest) (r *goods.UpdateGoodsResponse, err error) {
	var _args goods.GoodsServiceUpdateGoodsArgs
	_args.Req = req
	var _result goods.GoodsServiceUpdateGoodsResult
	if err = p.c.Call(ctx, "UpdateGoods", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchGoodsInfo(ctx context.Context, req *goods.SearchGoodsInfoRequest) (r *goods.SearchGoodsInfoResponse, err error) {
	var _args goods.GoodsServiceSearchGoodsInfoArgs
	_args.Req = req
	var _result goods.GoodsServiceSearchGoodsInfoResult
	if err = p.c.Call(ctx, "SearchGoodsInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchGoods(ctx context.Context, req *goods.SearchGoodsRequest) (r *goods.SearchGoodsResponse, err error) {
	var _args goods.GoodsServiceSearchGoodsArgs
	_args.Req = req
	var _result goods.GoodsServiceSearchGoodsResult
	if err = p.c.Call(ctx, "SearchGoods", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadGoodsPhoto(ctx context.Context, req *goods.UploadGoodsPhotoRequest) (r *goods.UploadGoodsPhotoResponse, err error) {
	var _args goods.GoodsServiceUploadGoodsPhotoArgs
	_args.Req = req
	var _result goods.GoodsServiceUploadGoodsPhotoResult
	if err = p.c.Call(ctx, "UploadGoodsPhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGoodsPhoto(ctx context.Context, req *goods.GetGoodsPhotoRequest) (r *goods.GetGoodsPhotoResponse, err error) {
	var _args goods.GoodsServiceGetGoodsPhotoArgs
	_args.Req = req
	var _result goods.GoodsServiceGetGoodsPhotoResult
	if err = p.c.Call(ctx, "GetGoodsPhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
